// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.0--rc1
// source: order.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnowflakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // 1:order，2:trade
	Num    int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SnowflakeRequest) Reset() {
	*x = SnowflakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeRequest) ProtoMessage() {}

func (x *SnowflakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeRequest.ProtoReflect.Descriptor instead.
func (*SnowflakeRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeRequest) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SnowflakeRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type SnowflakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SnowflakeResponse) Reset() {
	*x = SnowflakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeResponse) ProtoMessage() {}

func (x *SnowflakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeResponse.ProtoReflect.Descriptor instead.
func (*SnowflakeResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *SnowflakeResponse) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

//下单请求
type TradesOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //用户账号id
	TradeType int32 `protobuf:"varint,2,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"` // 1: 现货交易 2: 杠杆交易
	//  string instrument_id = 3; // 交易货币对  BTC_USDT_20200514_55000
	CurrencyId      int32  `protobuf:"varint,3,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`                               // 交易对象币ID
	CurrencyTradeId int32  `protobuf:"varint,4,opt,name=CurrencyTradeId,proto3" json:"CurrencyTradeId,omitempty"`                     //交易计价币ID   通常是104(USTD)
	Type            int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                                           // // 1:开多 2:开空 3:平多 4:平空  (现货为 1 3)
	OrderType       int32  `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                // 1：限价 2：市价
	Price           string `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`                                          //委托价格
	Size            string `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`                                            //下单数量    //如果是杠杆订单 下单数量应该是乘以杠杆倍数的数量 现货就直接是下单数量
	Leverage        int32  `protobuf:"varint,9,opt,name=leverage,proto3" json:"leverage,omitempty"`                                   //杠杆倍数
	Source          string `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`                                       //下单来源  API,PCWEB,MOBILE
	NoLimitLength   bool   `protobuf:"varint,11,opt,name=no_limit_length,json=noLimitLength,proto3" json:"no_limit_length,omitempty"` //平仓后门 字段
	WashOnly        bool   `protobuf:"varint,12,opt,name=wash_only,json=washOnly,proto3" json:"wash_only,omitempty"`
	ClientOid       string `protobuf:"bytes,13,opt,name=client_oid,json=clientOid,proto3" json:"client_oid,omitempty"` // 唯一id
	ExerciseDate    string `protobuf:"bytes,14,opt,name=ExerciseDate,proto3" json:"ExerciseDate,omitempty"`            //行使日期 (下单时间） 20200514
	TradePair       string `protobuf:"bytes,15,opt,name=tradePair,proto3" json:"tradePair,omitempty"`                  //交易对 USDT_BTC
}

func (x *TradesOrderRequest) Reset() {
	*x = TradesOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesOrderRequest) ProtoMessage() {}

func (x *TradesOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesOrderRequest.ProtoReflect.Descriptor instead.
func (*TradesOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *TradesOrderRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradesOrderRequest) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *TradesOrderRequest) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *TradesOrderRequest) GetCurrencyTradeId() int32 {
	if x != nil {
		return x.CurrencyTradeId
	}
	return 0
}

func (x *TradesOrderRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TradesOrderRequest) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *TradesOrderRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TradesOrderRequest) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *TradesOrderRequest) GetLeverage() int32 {
	if x != nil {
		return x.Leverage
	}
	return 0
}

func (x *TradesOrderRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TradesOrderRequest) GetNoLimitLength() bool {
	if x != nil {
		return x.NoLimitLength
	}
	return false
}

func (x *TradesOrderRequest) GetWashOnly() bool {
	if x != nil {
		return x.WashOnly
	}
	return false
}

func (x *TradesOrderRequest) GetClientOid() string {
	if x != nil {
		return x.ClientOid
	}
	return ""
}

func (x *TradesOrderRequest) GetExerciseDate() string {
	if x != nil {
		return x.ExerciseDate
	}
	return ""
}

func (x *TradesOrderRequest) GetTradePair() string {
	if x != nil {
		return x.TradePair
	}
	return ""
}

//下单响应
type TradesOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOid    string `protobuf:"bytes,1,opt,name=client_oid,json=clientOid,proto3" json:"client_oid,omitempty"`
	ErrorCode    int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TradesOrderResponse) Reset() {
	*x = TradesOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesOrderResponse) ProtoMessage() {}

func (x *TradesOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesOrderResponse.ProtoReflect.Descriptor instead.
func (*TradesOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *TradesOrderResponse) GetClientOid() string {
	if x != nil {
		return x.ClientOid
	}
	return ""
}

func (x *TradesOrderResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TradesOrderResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TradesOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64        `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	OrderData       []*OrderData `protobuf:"bytes,2,rep,name=order_data,json=orderData,proto3" json:"order_data,omitempty"` //OrderData数组
	CurrencyId      int32        `protobuf:"varint,3,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	CurrencyTradeId int32        `protobuf:"varint,4,opt,name=CurrencyTradeId,proto3" json:"CurrencyTradeId,omitempty"`
	Source          string       `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	NoLimitLength   bool         `protobuf:"varint,6,opt,name=no_limit_length,json=noLimitLength,proto3" json:"no_limit_length,omitempty"`
	WashOnly        bool         `protobuf:"varint,7,opt,name=wash_only,json=washOnly,proto3" json:"wash_only,omitempty"`
	ExerciseDate    string       `protobuf:"bytes,8,opt,name=ExerciseDate,proto3" json:"ExerciseDate,omitempty"` //行使日期 (下单时间）
	TradePair       string       `protobuf:"bytes,9,opt,name=tradePair,proto3" json:"tradePair,omitempty"`       //交易对 USDT_BTC
}

func (x *TradesOrdersRequest) Reset() {
	*x = TradesOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesOrdersRequest) ProtoMessage() {}

func (x *TradesOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesOrdersRequest.ProtoReflect.Descriptor instead.
func (*TradesOrdersRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *TradesOrdersRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradesOrdersRequest) GetOrderData() []*OrderData {
	if x != nil {
		return x.OrderData
	}
	return nil
}

func (x *TradesOrdersRequest) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *TradesOrdersRequest) GetCurrencyTradeId() int32 {
	if x != nil {
		return x.CurrencyTradeId
	}
	return 0
}

func (x *TradesOrdersRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TradesOrdersRequest) GetNoLimitLength() bool {
	if x != nil {
		return x.NoLimitLength
	}
	return false
}

func (x *TradesOrdersRequest) GetWashOnly() bool {
	if x != nil {
		return x.WashOnly
	}
	return false
}

func (x *TradesOrdersRequest) GetExerciseDate() string {
	if x != nil {
		return x.ExerciseDate
	}
	return ""
}

func (x *TradesOrdersRequest) GetTradePair() string {
	if x != nil {
		return x.TradePair
	}
	return ""
}

type OrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOid string `protobuf:"bytes,1,opt,name=client_oid,json=clientOid,proto3" json:"client_oid,omitempty"`
	Size      string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Type      int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	OrderType int32  `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	Price     string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *OrderData) Reset() {
	*x = OrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderData) ProtoMessage() {}

func (x *OrderData) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderData.ProtoReflect.Descriptor instead.
func (*OrderData) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *OrderData) GetClientOid() string {
	if x != nil {
		return x.ClientOid
	}
	return ""
}

func (x *OrderData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *OrderData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OrderData) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *OrderData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type TradesOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOids   []string `protobuf:"bytes,1,rep,name=client_oids,json=clientOids,proto3" json:"client_oids,omitempty"`
	ErrorCode    int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TradesOrdersResponse) Reset() {
	*x = TradesOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesOrdersResponse) ProtoMessage() {}

func (x *TradesOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesOrdersResponse.ProtoReflect.Descriptor instead.
func (*TradesOrdersResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *TradesOrdersResponse) GetClientOids() []string {
	if x != nil {
		return x.ClientOids
	}
	return nil
}

func (x *TradesOrdersResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TradesOrdersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TradesCancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClientOid       string `protobuf:"bytes,2,opt,name=client_oid,json=clientOid,proto3" json:"client_oid,omitempty"`
	CurrencyId      int32  `protobuf:"varint,3,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	TradeCurrencyId int32  `protobuf:"varint,4,opt,name=TradeCurrencyId,proto3" json:"TradeCurrencyId,omitempty"`
	Source          string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *TradesCancelOrderRequest) Reset() {
	*x = TradesCancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesCancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesCancelOrderRequest) ProtoMessage() {}

func (x *TradesCancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesCancelOrderRequest.ProtoReflect.Descriptor instead.
func (*TradesCancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *TradesCancelOrderRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradesCancelOrderRequest) GetClientOid() string {
	if x != nil {
		return x.ClientOid
	}
	return ""
}

func (x *TradesCancelOrderRequest) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *TradesCancelOrderRequest) GetTradeCurrencyId() int32 {
	if x != nil {
		return x.TradeCurrencyId
	}
	return 0
}

func (x *TradesCancelOrderRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type TradesCancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOid    string `protobuf:"bytes,1,opt,name=client_oid,json=clientOid,proto3" json:"client_oid,omitempty"`
	ErrorCode    int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TradesCancelOrderResponse) Reset() {
	*x = TradesCancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesCancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesCancelOrderResponse) ProtoMessage() {}

func (x *TradesCancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesCancelOrderResponse.ProtoReflect.Descriptor instead.
func (*TradesCancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{8}
}

func (x *TradesCancelOrderResponse) GetClientOid() string {
	if x != nil {
		return x.ClientOid
	}
	return ""
}

func (x *TradesCancelOrderResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TradesCancelOrderResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type TradesCancelBatchOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64    `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClientOids      []string `protobuf:"bytes,2,rep,name=client_oids,json=clientOids,proto3" json:"client_oids,omitempty"`
	CurrencyId      int32    `protobuf:"varint,3,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	TradeCurrencyId int32    `protobuf:"varint,4,opt,name=TradeCurrencyId,proto3" json:"TradeCurrencyId,omitempty"`
	Source          string   `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *TradesCancelBatchOrdersRequest) Reset() {
	*x = TradesCancelBatchOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesCancelBatchOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesCancelBatchOrdersRequest) ProtoMessage() {}

func (x *TradesCancelBatchOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesCancelBatchOrdersRequest.ProtoReflect.Descriptor instead.
func (*TradesCancelBatchOrdersRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{9}
}

func (x *TradesCancelBatchOrdersRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *TradesCancelBatchOrdersRequest) GetClientOids() []string {
	if x != nil {
		return x.ClientOids
	}
	return nil
}

func (x *TradesCancelBatchOrdersRequest) GetCurrencyId() int32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *TradesCancelBatchOrdersRequest) GetTradeCurrencyId() int32 {
	if x != nil {
		return x.TradeCurrencyId
	}
	return 0
}

func (x *TradesCancelBatchOrdersRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type TradesCancelBatchOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOids   []string `protobuf:"bytes,1,rep,name=client_oids,json=clientOids,proto3" json:"client_oids,omitempty"`
	ErrorCode    int32    `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TradesCancelBatchOrdersResponse) Reset() {
	*x = TradesCancelBatchOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesCancelBatchOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesCancelBatchOrdersResponse) ProtoMessage() {}

func (x *TradesCancelBatchOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesCancelBatchOrdersResponse.ProtoReflect.Descriptor instead.
func (*TradesCancelBatchOrdersResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{10}
}

func (x *TradesCancelBatchOrdersResponse) GetClientOids() []string {
	if x != nil {
		return x.ClientOids
	}
	return nil
}

func (x *TradesCancelBatchOrdersResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *TradesCancelBatchOrdersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x3d, 0x0a, 0x10, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x22, 0x25, 0x0a, 0x11, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x78, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6e, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x77, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0x87, 0x01,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x7e, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x4e, 0x0a, 0x09, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xd1, 0x02, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_order_proto_goTypes = []interface{}{
	(*SnowflakeRequest)(nil),                // 0: protos.SnowflakeRequest
	(*SnowflakeResponse)(nil),               // 1: protos.SnowflakeResponse
	(*TradesOrderRequest)(nil),              // 2: protos.TradesOrderRequest
	(*TradesOrderResponse)(nil),             // 3: protos.TradesOrderResponse
	(*TradesOrdersRequest)(nil),             // 4: protos.TradesOrdersRequest
	(*OrderData)(nil),                       // 5: protos.OrderData
	(*TradesOrdersResponse)(nil),            // 6: protos.TradesOrdersResponse
	(*TradesCancelOrderRequest)(nil),        // 7: protos.TradesCancelOrderRequest
	(*TradesCancelOrderResponse)(nil),       // 8: protos.TradesCancelOrderResponse
	(*TradesCancelBatchOrdersRequest)(nil),  // 9: protos.TradesCancelBatchOrdersRequest
	(*TradesCancelBatchOrdersResponse)(nil), // 10: protos.TradesCancelBatchOrdersResponse
}
var file_order_proto_depIdxs = []int32{
	5,  // 0: protos.TradesOrdersRequest.order_data:type_name -> protos.OrderData
	0,  // 1: protos.Snowflake.Generate:input_type -> protos.SnowflakeRequest
	2,  // 2: protos.Trades.Order:input_type -> protos.TradesOrderRequest
	4,  // 3: protos.Trades.Orders:input_type -> protos.TradesOrdersRequest
	7,  // 4: protos.Trades.CancelOrder:input_type -> protos.TradesCancelOrderRequest
	9,  // 5: protos.Trades.CancelBatchOrders:input_type -> protos.TradesCancelBatchOrdersRequest
	1,  // 6: protos.Snowflake.Generate:output_type -> protos.SnowflakeResponse
	3,  // 7: protos.Trades.Order:output_type -> protos.TradesOrderResponse
	6,  // 8: protos.Trades.Orders:output_type -> protos.TradesOrdersResponse
	8,  // 9: protos.Trades.CancelOrder:output_type -> protos.TradesCancelOrderResponse
	10, // 10: protos.Trades.CancelBatchOrders:output_type -> protos.TradesCancelBatchOrdersResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowflakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowflakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesCancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesCancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesCancelBatchOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesCancelBatchOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnowflakeClient is the client API for Snowflake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeClient interface {
	Generate(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error)
}

type snowflakeClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeClient(cc grpc.ClientConnInterface) SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) Generate(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*SnowflakeResponse, error) {
	out := new(SnowflakeResponse)
	err := c.cc.Invoke(ctx, "/protos.Snowflake/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServer is the server API for Snowflake service.
type SnowflakeServer interface {
	Generate(context.Context, *SnowflakeRequest) (*SnowflakeResponse, error)
}

// UnimplementedSnowflakeServer can be embedded to have forward compatible implementations.
type UnimplementedSnowflakeServer struct {
}

func (*UnimplementedSnowflakeServer) Generate(context.Context, *SnowflakeRequest) (*SnowflakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}

func RegisterSnowflakeServer(s *grpc.Server, srv SnowflakeServer) {
	s.RegisterService(&_Snowflake_serviceDesc, srv)
}

func _Snowflake_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Snowflake/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).Generate(ctx, req.(*SnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snowflake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Snowflake",
	HandlerType: (*SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _Snowflake_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

// TradesClient is the client API for Trades service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradesClient interface {
	Order(ctx context.Context, in *TradesOrderRequest, opts ...grpc.CallOption) (*TradesOrderResponse, error)
	Orders(ctx context.Context, in *TradesOrdersRequest, opts ...grpc.CallOption) (*TradesOrdersResponse, error)
	CancelOrder(ctx context.Context, in *TradesCancelOrderRequest, opts ...grpc.CallOption) (*TradesCancelOrderResponse, error)
	CancelBatchOrders(ctx context.Context, in *TradesCancelBatchOrdersRequest, opts ...grpc.CallOption) (*TradesCancelBatchOrdersResponse, error)
}

type tradesClient struct {
	cc grpc.ClientConnInterface
}

func NewTradesClient(cc grpc.ClientConnInterface) TradesClient {
	return &tradesClient{cc}
}

func (c *tradesClient) Order(ctx context.Context, in *TradesOrderRequest, opts ...grpc.CallOption) (*TradesOrderResponse, error) {
	out := new(TradesOrderResponse)
	err := c.cc.Invoke(ctx, "/protos.Trades/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) Orders(ctx context.Context, in *TradesOrdersRequest, opts ...grpc.CallOption) (*TradesOrdersResponse, error) {
	out := new(TradesOrdersResponse)
	err := c.cc.Invoke(ctx, "/protos.Trades/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) CancelOrder(ctx context.Context, in *TradesCancelOrderRequest, opts ...grpc.CallOption) (*TradesCancelOrderResponse, error) {
	out := new(TradesCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/protos.Trades/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesClient) CancelBatchOrders(ctx context.Context, in *TradesCancelBatchOrdersRequest, opts ...grpc.CallOption) (*TradesCancelBatchOrdersResponse, error) {
	out := new(TradesCancelBatchOrdersResponse)
	err := c.cc.Invoke(ctx, "/protos.Trades/CancelBatchOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradesServer is the server API for Trades service.
type TradesServer interface {
	Order(context.Context, *TradesOrderRequest) (*TradesOrderResponse, error)
	Orders(context.Context, *TradesOrdersRequest) (*TradesOrdersResponse, error)
	CancelOrder(context.Context, *TradesCancelOrderRequest) (*TradesCancelOrderResponse, error)
	CancelBatchOrders(context.Context, *TradesCancelBatchOrdersRequest) (*TradesCancelBatchOrdersResponse, error)
}

// UnimplementedTradesServer can be embedded to have forward compatible implementations.
type UnimplementedTradesServer struct {
}

func (*UnimplementedTradesServer) Order(context.Context, *TradesOrderRequest) (*TradesOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (*UnimplementedTradesServer) Orders(context.Context, *TradesOrdersRequest) (*TradesOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (*UnimplementedTradesServer) CancelOrder(context.Context, *TradesCancelOrderRequest) (*TradesCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedTradesServer) CancelBatchOrders(context.Context, *TradesCancelBatchOrdersRequest) (*TradesCancelBatchOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBatchOrders not implemented")
}

func RegisterTradesServer(s *grpc.Server, srv TradesServer) {
	s.RegisterService(&_Trades_serviceDesc, srv)
}

func _Trades_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Trades/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).Order(ctx, req.(*TradesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Trades/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).Orders(ctx, req.(*TradesOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Trades/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).CancelOrder(ctx, req.(*TradesCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trades_CancelBatchOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesCancelBatchOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradesServer).CancelBatchOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Trades/CancelBatchOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradesServer).CancelBatchOrders(ctx, req.(*TradesCancelBatchOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trades_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Trades",
	HandlerType: (*TradesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Order",
			Handler:    _Trades_Order_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _Trades_Orders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Trades_CancelOrder_Handler,
		},
		{
			MethodName: "CancelBatchOrders",
			Handler:    _Trades_CancelBatchOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
